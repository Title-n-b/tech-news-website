import { initializeApp } from "firebase/app"
import { getFirestore, collection, addDoc } from "firebase/firestore"
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage"
import dotenv from "dotenv"

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config({ path: ".env.local" })

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
}

const app = initializeApp(firebaseConfig)
const db = getFirestore(app)
const storage = getStorage(app)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
async function createSampleImage(text: string, width = 800, height = 400): Promise<string> {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas
    const canvas = document.createElement("canvas")
    const ctx = canvas.getContext("2d")!
    canvas.width = width
    canvas.height = height

    // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á gradient
    const gradient = ctx.createLinearGradient(0, 0, width, height)
    gradient.addColorStop(0, "#1e3a8a")
    gradient.addColorStop(1, "#3b82f6")
    ctx.fillStyle = gradient
    ctx.fillRect(0, 0, width, height)

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    ctx.fillStyle = "white"
    ctx.font = "bold 32px Arial"
    ctx.textAlign = "center"
    ctx.textBaseline = "middle"

    // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    const words = text.split(" ")
    const lines = []
    let currentLine = words[0]

    for (let i = 1; i < words.length; i++) {
      const word = words[i]
      const width_test = ctx.measureText(currentLine + " " + word).width
      if (width_test < canvas.width - 100) {
        currentLine += " " + word
      } else {
        lines.push(currentLine)
        currentLine = word
      }
    }
    lines.push(currentLine)

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const lineHeight = 40
    const startY = (canvas.height - lines.length * lineHeight) / 2
    lines.forEach((line, index) => {
      ctx.fillText(line, canvas.width / 2, startY + index * lineHeight)
    })

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô blob
    return new Promise((resolve) => {
      canvas.toBlob(async (blob) => {
        if (blob) {
          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Firebase Storage
          const fileName = `sample_${Date.now()}_${Math.random().toString(36).substr(2, 9)}.png`
          const storageRef = ref(storage, `news-images/${fileName}`)

          const snapshot = await uploadBytes(storageRef, blob)
          const downloadURL = await getDownloadURL(snapshot.ref)

          resolve(downloadURL)
        }
      }, "image/png")
    })
  } catch (error) {
    console.error("Error creating sample image:", error)
    return "/placeholder.svg?height=400&width=800"
  }
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
const newsArticlesWithImages = [
  {
    title: "ChatGPT-5 ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏•‡∏Å AI",
    excerpt: "OpenAI ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß ChatGPT-5 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö multimodal ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô",
    content: `# ChatGPT-5: ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á AI\n\nOpenAI ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß **ChatGPT-5** ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡πâ‡∏≤‡∏ß‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå`,
    authorName: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
    categoryName: "AI & ML",
    featured: true,
    tags: ["ChatGPT", "OpenAI", "AI"],
  },
  {
    title: "Next.js 15 ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ",
    excerpt: "Vercel ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß Next.js 15 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà",
    content: `# Next.js 15: ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ\n\nVercel ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß **Next.js 15** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà`,
    authorName: "‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡∏¥‡πâ‡∏á",
    categoryName: "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤",
    featured: false,
    tags: ["Next.js", "React"],
  },
]

async function seedDataWithImages() {
  try {
    console.log("üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")

    for (const article of newsArticlesWithImages) {
      console.log(`üì∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${article.title}`)

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
      const imageUrl = await createSampleImage(article.title)

      const newsData = {
        ...article,
        image: imageUrl,
        date: new Date().toLocaleDateString("th-TH"),
        slug: article.title
          .toLowerCase()
          .replace(/[^\w\s-]/g, "")
          .replace(/\s+/g, "-"),
        views: Math.floor(Math.random() * 10000) + 1000,
        likes: Math.floor(Math.random() * 500) + 50,
        readTime: Math.ceil(article.content.split(" ").length / 200),
        createdAt: new Date(),
        updatedAt: new Date(),
      }

      await addDoc(collection(db, "news"), newsData)
      console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ: ${article.title}`)
    }

    console.log("üéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
  }
}

// ‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô browser environment
if (typeof window !== "undefined") {
  seedDataWithImages()
}
